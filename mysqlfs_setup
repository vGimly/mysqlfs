#!/bin/bash

##
##  MySQLfs - kickoff and upgrade scripts
##
##  Requirements:
##   - rely on the presence of the tree table
##     to understand if this is a new setup
##   - rely on a "DATABASE_VERSION" table inside the database
##     to understand what's the upgrade starting point.
##   - requires mysql client to be in the path...
##
##  if it can't find the table it asks you if you want to create it
##
##

DBUpdateScripts="/usr/local/share/mysqlfs/sql/update"

clear
echo 
echo Welcome to MySQLfs database setup script - relase 1.0
echo
echo
echo ============================================================
echo WARNING:
echo "If you're upgrading, it's recommend to shutdown MySQLfs's"
echo "instance before upgrading the DB."
echo Upgrading the DB with an active instance could corrupt your data.
echo ============================================================
echo
echo
echo In order to setup/upgrade your DB we need some informations.
echo

# You can run DBHost= DBName= DBUser=user DBPass=pass ./mysqlfs_setup
# make it empty, for default paramethers
echo "Please insert your DB host (leave blank for localhost):"
[[ ! -v DBHost ]] && printf "#> " && read DBHost; DBHost=${DBHost:-localhost}

echo "Please insert your MySQLfs DB name (leave blank for mysqlfs):"
[[ ! -v DBName ]] && printf "#> " && read DBName; DBName=${DBName:-mysqlfs}

echo "Please insert your MySQLfs username (leave blank for mysqlfs):"
[[ ! -v DBUser ]] && printf "#> " && read DBUser; DBUser=${DBUser:-mysqlfs}

echo "Please insert your MySQLfs password (leave blank for mysqlfs):"
[[ ! -v DBPass ]] && printf "#> " && read DBPass; DBPass=${DBPass:-mysqlfs}

echo
echo Please confirm the following settings:
echo mysql://$DBUser:$DBPass@$DBHost/$DBName
echo
echo "Correct? (y/n)"
printf "#> "
read Correct

if [ "$Correct" != "y" ]; then
  echo
  echo Aborting setup. Please restart $0 to retry.
  echo -------------------------------------------
  echo
  exit 1
fi

echo 
echo Checking if we already a database...
TableExists=`echo "SHOW TABLES LIKE 'tree';" | mysql -N -h $DBHost -u $DBUser --password=$DBPass $DBName`

if [ "$TableExists" != "tree" ]; then
  echo "A 'tree' table doesn't seem to exist in your database."
  echo
  echo "If this your first installation this is normal."
  echo
  echo "Continue creating a new database? (y/n)"
  printf "#> "
  read Correct

  if [ "$Correct" != "y" ]; then
    echo
    echo Aborting setup. Please restart $0 to retry.
    echo -------------------------------------------
    echo
    exit 1
  fi

  echo Executing $DBUpdateScripts/initial_schema.sql
  mysql -N -h $DBHost -u $DBUser --password=$DBPass $DBName < $DBUpdateScripts/initial_schema.sql > /tmp/dbupdate_stdout.log 2> /tmp/dbupdate_stderr.log
  ErrorLevel=$?
  if [ $ErrorLevel -ne 0 ]; then  
    echo 
    echo Error creating the initial schema.
    echo Aborting setup. Please restart $0 to retry.
    echo -------------------------------------------
    echo
    exit 1
  else
    echo
    echo Initial database setup succeeded!
    echo
  fi
  echo

fi

echo 
echo Checking for the DATABASE_VERSION table...
TableExists=`echo "SHOW TABLES LIKE 'DATABASE_VERSION';" | mysql -N -h $DBHost -u $DBUser --password=$DBPass $DBName`

if [ "$TableExists" != "DATABASE_VERSION" ]; then
  echo "A 'DATABASE_VERSION' table doesn't seem to exist in your database."
  echo 
  echo If this is your first database upgrade ever this may be normal.
  echo
  echo PLEASE BE AWARE THAT THIS SCRIPT REQUIRE YOUR PREVIOUS MYSQLFS
  echo RELEASE TO BE AT LEAST 0.4.1!!!!!!
  echo
  echo "Continue creating DATABASE_VERSION? (y/n)"
  printf "#> "
  read Correct

  if [ "$Correct" != "y" ]; then
    echo
    echo Aborting setup. Please restart $0 to retry.
    echo -------------------------------------------
    echo
    exit 1
  fi

  echo Executing $DBUpdateScripts/00000000.sql
  mysql -N -h $DBHost -u $DBUser --password=$DBPass $DBName < $DBUpdateScripts/00000000.sql > /tmp/dbupdate_stdout.log 2> /tmp/dbupdate_stderr.log
  ErrorLevel=$?
  if [ $ErrorLevel -ne 0 ]; then  
    echo 
    echo Error creating the DATABASE_VERSION table
    echo Aborting setup. Please restart $0 to retry.
    echo -------------------------------------------
    echo
    exit 1
  else
    echo
    echo DATABASE_VERSION succesfully created.
    echo
  fi
  echo

fi

echo
echo Checking current DATABASE_VERSION:
CurrentDB=`echo "SELECT MAX(CURRENT_VERSION) FROM DATABASE_VERSION;" | mysql -N -h $DBHost -u $DBUser --password=$DBPass $DBName`

if [ "$CurrentDB" = "NULL" ]; then
  CurrentDB=0
fi

echo Current database version $CurrentDB
echo 

NextDB=`expr $CurrentDB + 1`
NextFile=`echo 0000000$NextDB | rev | cut -c 1-8 | rev`

echo "Searching for next DB upgrades (starting from #$NextDB)"

while [ -f $DBUpdateScripts/$NextFile.sql ]; do
  echo "Found $DBUpdateScripts/$NextFile.sql - executing it"
  mysql -N -h $DBHost -u $DBUser --password=$DBPass $DBName < $DBUpdateScripts/$NextFile.sql > /tmp/dbupdate_stdout.log 2> /tmp/dbupdate_stderr.log
  ErrorLevel=$?
  if [ $ErrorLevel -ne 0 ]; then
   echo "Error applying update $NextDB"
   cat /tmp/dbupdate_stdout.log
   rm  /tmp/dbupdate_stdout.log
   cat /tmp/dbupdate_stderr.log
   rm  /tmp/dbupdate_stderr.log
   exit 1
  else
   echo "INSERT INTO DATABASE_VERSION SET CURRENT_VERSION = $NextDB, LAST_CHANGE=NOW();" | mysql -N -h $DBHost -u $DBUser --password=$DBPass $DBName
   echo "Updating DATABASE_VERSION to version $NextDB"
  fi
  rm /tmp/dbupdate_std*.log

  NextDB=`expr $NextDB + 1`
  NextFile=`echo 0000000$NextDB | rev | cut -c 1-8 | rev`
done

echo 
echo Everything done.
echo
echo Now you can upgrade your MySQLfs binaries and start/restart your filesystem
echo by running command
echo
echo mysql://$DBUser:$DBPass@$DBHost/$DBName
echo "#> mysqlfs -oallow_other -ohost=$DBHost -odatabase=$DBName -ouser=$DBUser -opassword=$DBPass -obig_writes /mountpoint"
echo
